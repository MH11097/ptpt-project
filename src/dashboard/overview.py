import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import random

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="AQI Forecast",
    page_icon="üå¨Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main {
        background-color: #f5f7fa;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 24px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: white;
        border-radius: 5px 5px 0px 0px;
        gap: 1px;
        padding: 10px 20px;
    }
    .stTabs [aria-selected="true"] {
        background-color: #4361ee;
        color: white;
    }
    .metric-card {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .aqi-value {
        font-size: 40px;
        font-weight: bold;
    }
    .aqi-label {
        font-size: 14px;
        color: #555;
    }
    .aqi-good {
        color: #00e400;
    }
    .aqi-moderate {
        color: #ffff00;
    }
    .aqi-unhealthy-sensitive {
        color: #ff7e00;
    }
    .aqi-unhealthy {
        color: #ff0000;
    }
    .aqi-very-unhealthy {
        color: #99004c;
    }
    .aqi-hazardous {
        color: #7d0023;
    }
</style>
""", unsafe_allow_html=True)

# T·∫°o d·ªØ li·ªáu m·∫´u cho demo
@st.cache_data
def generate_sample_data():
    # D·ªØ li·ªáu AQI trong 7 ng√†y qua
    dates = [(datetime.now() - timedelta(days=i)).strftime("%d/%m/%Y") for i in range(7, 0, -1)]
    
    # AQI c∆° b·∫£n v·ªõi xu h∆∞·ªõng tƒÉng nh·∫π
    base_aqi = [45, 52, 75, 85, 67, 58, 63]
    
    # D·ªØ li·ªáu AQI theo gi·ªù trong ng√†y
    hours = [f"{i:02d}:00" for i in range(24)]
    hourly_aqi = []
    
    # T·∫°o d·ªØ li·ªáu theo m·∫´u ng√†y ƒë√™m, v·ªõi AQI cao h∆°n v√†o gi·ªù cao ƒëi·ªÉm
    for i in range(24):
        if 6 <= i <= 9:  # Gi·ªù cao ƒëi·ªÉm bu·ªïi s√°ng
            hourly_aqi.append(base_aqi[-1] + random.randint(10, 25))
        elif 16 <= i <= 19:  # Gi·ªù cao ƒëi·ªÉm bu·ªïi chi·ªÅu
            hourly_aqi.append(base_aqi[-1] + random.randint(15, 30))
        elif 22 <= i or i <= 5:  # Ban ƒë√™m
            hourly_aqi.append(base_aqi[-1] - random.randint(5, 15))
        else:  # C√°c gi·ªù kh√°c
            hourly_aqi.append(base_aqi[-1] + random.randint(-10, 10))
    
    # ƒê·∫£m b·∫£o AQI kh√¥ng √¢m
    hourly_aqi = [max(0, aqi) for aqi in hourly_aqi]
    
    # D·ªØ li·ªáu d·ª± b√°o 7 ng√†y ti·∫øp theo
    forecast_dates = [(datetime.now() + timedelta(days=i)).strftime("%d/%m/%Y") for i in range(1, 8)]
    # D·ª± b√°o d·ª±a tr√™n AQI hi·ªán t·∫°i v·ªõi m·ªôt xu h∆∞·ªõng
    forecast_aqi = []
    current = base_aqi[-1]
    
    # T·∫°o xu h∆∞·ªõng: tƒÉng nh·∫π, sau ƒë√≥ gi·∫£m, r·ªìi tƒÉng nh·∫π tr·ªü l·∫°i
    trends = [5, 8, -3, -7, -10, 3, 7]
    for trend in trends:
        current += trend + random.randint(-5, 5)
        current = max(20, min(200, current))  # Gi·ªõi h·∫°n gi√° tr·ªã AQI
        forecast_aqi.append(current)
    
    # D·ªØ li·ªáu c√°c th√†nh ph·∫ßn √¥ nhi·ªÖm
    pollutants = {
        "PM2.5": [round(aqi * 0.6 + random.uniform(-5, 5), 1) for aqi in base_aqi],
        "PM10": [round(aqi * 0.8 + random.uniform(-10, 10), 1) for aqi in base_aqi],
        "O3": [round(aqi * 0.3 + random.uniform(-3, 3), 1) for aqi in base_aqi],
        "NO2": [round(aqi * 0.15 + random.uniform(-2, 2), 1) for aqi in base_aqi],
        "SO2": [round(aqi * 0.1 + random.uniform(-1, 1), 1) for aqi in base_aqi],
        "CO": [round(aqi * 0.05 + random.uniform(-0.5, 0.5), 1) for aqi in base_aqi]
    }
    
    # ƒêi·ªÅu ki·ªán m√¥i tr∆∞·ªùng
    env_conditions = {
        "temperature": [random.randint(20, 32) for _ in range(7)],  # ¬∞C
        "humidity": [random.randint(55, 85) for _ in range(7)],  # %
        "wind_speed": [round(random.uniform(1, 15), 1) for _ in range(7)],  # km/h
        "precipitation": [round(random.uniform(0, 15), 1) for _ in range(7)]  # mm
    }
    
    # ƒê√≥ng g√≥i d·ªØ li·ªáu
    daily_data = pd.DataFrame({
        "date": dates,
        "aqi": base_aqi,
        "PM2.5": pollutants["PM2.5"],
        "PM10": pollutants["PM10"],
        "O3": pollutants["O3"],
        "NO2": pollutants["NO2"],
        "SO2": pollutants["SO2"],
        "CO": pollutants["CO"],
        "temperature": env_conditions["temperature"],
        "humidity": env_conditions["humidity"],
        "wind_speed": env_conditions["wind_speed"],
        "precipitation": env_conditions["precipitation"]
    })
    
    hourly_data = pd.DataFrame({
        "hour": hours,
        "aqi": hourly_aqi
    })
    
    forecast_data = pd.DataFrame({
        "date": forecast_dates,
        "aqi": forecast_aqi
    })
    
    return daily_data, hourly_data, forecast_data

# H√†m l·∫•y th√¥ng tin AQI
def get_aqi_info(aqi):
    if aqi <= 50:
        return {
            "category": "T·ªët",
            "color": "#00e400",
            "description": "Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ t·ªët, kh√¥ng c√≥ r·ªßi ro s·ª©c kh·ªèe.",
            "recommendation": "B·∫°n c√≥ th·ªÉ tham gia c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi b√¨nh th∆∞·ªùng."
        }
    elif aqi <= 100:
        return {
            "category": "Trung b√¨nh",
            "color": "#ffff00",
            "description": "Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ ·ªü m·ª©c trung b√¨nh, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn m·ªôt s·ªë ng∆∞·ªùi nh·∫°y c·∫£m.",
            "recommendation": "Nh·ªØng ng∆∞·ªùi nh·∫°y c·∫£m (ng∆∞·ªùi c√≥ b·ªánh h√¥ h·∫•p) n√™n h·∫°n ch·∫ø c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi k√©o d√†i."
        }
    elif aqi <= 150:
        return {
            "category": "K√©m",
            "color": "#ff7e00",
            "description": "Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ k√©m, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn nh·ªØng ng∆∞·ªùi nh·∫°y c·∫£m.",
            "recommendation": "Nh·ªØng ng∆∞·ªùi nh·∫°y c·∫£m n√™n gi·∫£m ho·∫°t ƒë·ªông ngo√†i tr·ªùi. M·ªçi ng∆∞·ªùi n√™n h·∫°n ch·∫ø c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi k√©o d√†i."
        }
    elif aqi <= 200:
        return {
            "category": "X·∫•u",
            "color": "#ff0000",
            "description": "Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ x·∫•u, c√≥ th·ªÉ g√¢y ·∫£nh h∆∞·ªüng s·ª©c kh·ªèe cho m·ªçi ng∆∞·ªùi.",
            "recommendation": "M·ªçi ng∆∞·ªùi n√™n gi·∫£m ho·∫°t ƒë·ªông ngo√†i tr·ªùi. Nh·ªØng ng∆∞·ªùi nh·∫°y c·∫£m n√™n ·ªü trong nh√†."
        }
    elif aqi <= 300:
        return {
            "category": "R·∫•t x·∫•u",
            "color": "#99004c",
            "description": "Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ r·∫•t x·∫•u, c·∫£nh b√°o nguy c∆° s·ª©c kh·ªèe.",
            "recommendation": "Tr√°nh ho·∫°t ƒë·ªông ngo√†i tr·ªùi. Nh·ªØng ng∆∞·ªùi nh·∫°y c·∫£m n√™n ·ªü trong nh√† v√† gi·∫£m ho·∫°t ƒë·ªông."
        }
    else:
        return {
            "category": "Nguy hi·ªÉm",
            "color": "#7d0023",
            "description": "Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ ·ªü m·ª©c nguy hi·ªÉm, c·∫£nh b√°o kh·∫©n c·∫•p v·ªÅ s·ª©c kh·ªèe.",
            "recommendation": "M·ªçi ng∆∞·ªùi n√™n ·ªü trong nh√†, ƒë√≥ng c·ª≠a s·ªï v√† s·ª≠ d·ª•ng m√°y l·ªçc kh√¥ng kh√≠ n·∫øu c√≥ th·ªÉ."
        }

# T·∫£i d·ªØ li·ªáu m·∫´u
daily_data, hourly_data, forecast_data = generate_sample_data()

# Sidebar
st.sidebar.title("AQI Forecast")

# Ch·ªçn th√†nh ph·ªë
city = st.sidebar.selectbox(
    "Ch·ªçn th√†nh ph·ªë",
    ["H√† N·ªôi", "H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "H·∫£i Ph√≤ng", "C·∫ßn Th∆°"]
)

# Th·ªùi gian c·∫≠p nh·∫≠t
st.sidebar.markdown(f"**C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:** {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}")

# C√°c c√†i ƒë·∫∑t c·ªßa ng∆∞·ªùi d√πng
st.sidebar.markdown("### C√†i ƒë·∫∑t c√° nh√¢n")

# Nh·∫≠n th√¥ng b√°o
notification = st.sidebar.toggle("Nh·∫≠n th√¥ng b√°o khi AQI v∆∞·ª£t ng∆∞·ª°ng", value=True)
if notification:
    notification_threshold = st.sidebar.slider("Ng∆∞·ª°ng c·∫£nh b√°o AQI", min_value=50, max_value=200, value=100, step=10)

# Ch·ªçn ch·∫ø ƒë·ªô hi·ªÉn th·ªã
display_mode = st.sidebar.radio("Ch·∫ø ƒë·ªô hi·ªÉn th·ªã", ["T·∫•t c·∫£ ch·ªâ s·ªë", "Ch·ªâ PM2.5", "Ch·ªâ PM10", "T√πy ch·ªânh"])

if display_mode == "T√πy ch·ªânh":
    pollutants_to_show = st.sidebar.multiselect(
        "Ch·ªçn c√°c ch·ªâ s·ªë hi·ªÉn th·ªã",
        ["PM2.5", "PM10", "O3", "NO2", "SO2", "CO"],
        default=["PM2.5", "PM10"]
    )

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ AQI
st.sidebar.markdown("### Th√¥ng tin v·ªÅ AQI")
st.sidebar.markdown("""
- **0-50**: T·ªët (Xanh l√°)
- **51-100**: Trung b√¨nh (V√†ng)
- **101-150**: K√©m (Cam)
- **151-200**: X·∫•u (ƒê·ªè)
- **201-300**: R·∫•t x·∫•u (T√≠m)
- **>300**: Nguy hi·ªÉm (N√¢u ƒë·ªè)
""")

# Th√¥ng tin li√™n h·ªá ho·∫∑c ngu·ªìn d·ªØ li·ªáu
st.sidebar.markdown("---")
st.sidebar.info("D·ªØ li·ªáu t·ª´: *Trung t√¢m Quan tr·∫Øc M√¥i tr∆∞·ªùng*")

# N·ªôi dung ch√≠nh
st.title(f"Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ t·∫°i {city}")

# Tabs ch√≠nh
tab1, tab2, tab3 = st.tabs(["üìä T·ªïng quan", "üîç Ph√¢n t√≠ch", "üß™ Tr·∫£i nghi·ªám ng∆∞·ªùi d√πng"])

with tab1:
    # H√†ng ƒë·∫ßu v·ªõi AQI hi·ªán t·∫°i
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # L·∫•y AQI g·∫ßn nh·∫•t (h√¥m nay)
        current_aqi = daily_data.iloc[-1]["aqi"]
        aqi_info = get_aqi_info(current_aqi)
        
        st.markdown(f"""
        <div class="metric-card">
            <div class="aqi-value" style="color:{aqi_info['color']}">{int(current_aqi)}</div>
            <div class="aqi-label" style="font-size:24px; color:{aqi_info['color']}; font-weight:bold">{aqi_info['category']}</div>
            <div class="aqi-label">Ch·ªâ s·ªë AQI hi·ªán t·∫°i</div>
            <hr style="margin: 15px 0">
            <div style="font-size:15px">{aqi_info['description']}</div>
            <div style="font-size:14px; margin-top:10px; color:#555">
                <strong>Khuy·∫øn ngh·ªã:</strong> {aqi_info['recommendation']}
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # Bi·ªÉu ƒë·ªì di·ªÖn bi·∫øn 24 gi·ªù
        st.markdown("<h3>Di·ªÖn bi·∫øn AQI 24 gi·ªù qua</h3>", unsafe_allow_html=True)
        
        fig = px.line(
            hourly_data, 
            x="hour", 
            y="aqi",
            markers=True,
            line_shape="spline",
            color_discrete_sequence=["#4361ee"]
        )
        
        # T√πy ch·ªânh giao di·ªán
        fig.update_layout(
            xaxis_title="Gi·ªù",
            yaxis_title="AQI",
            margin=dict(l=10, r=10, t=10, b=10),
            height=300,
            xaxis=dict(tickmode='linear', dtick=3),
            plot_bgcolor="white",
            hovermode="x unified"
        )
        
        # Th√™m v√πng bi·ªÉu th·ªã m·ª©c ƒë·ªô AQI
        fig.add_hrect(y0=0, y1=50, line_width=0, fillcolor="green", opacity=0.1)
        fig.add_hrect(y0=50, y1=100, line_width=0, fillcolor="yellow", opacity=0.1)
        fig.add_hrect(y0=100, y1=150, line_width=0, fillcolor="orange", opacity=0.1)
        fig.add_hrect(y0=150, y1=200, line_width=0, fillcolor="red", opacity=0.1)
        fig.add_hrect(y0=200, y1=300, line_width=0, fillcolor="purple", opacity=0.1)
        
        st.plotly_chart(fig, use_container_width=True)
    
    # D·ª± b√°o 7 ng√†y
    st.markdown("<h3>D·ª± b√°o 7 ng√†y t·ªõi</h3>", unsafe_allow_html=True)
    
    # Th√™m c·ªôt m√†u d·ª±a v√†o AQI
    forecast_data["color"] = forecast_data["aqi"].apply(lambda x: get_aqi_info(x)["color"])
    forecast_data["category"] = forecast_data["aqi"].apply(lambda x: get_aqi_info(x)["category"])
    
    fig = px.bar(
        forecast_data, 
        x="date", 
        y="aqi",
        color="category",
        text="aqi",
        color_discrete_map={
            "T·ªët": "#00e400",
            "Trung b√¨nh": "#ffff00",
            "K√©m": "#ff7e00",
            "X·∫•u": "#ff0000",
            "R·∫•t x·∫•u": "#99004c",
            "Nguy hi·ªÉm": "#7d0023"
        },
        category_orders={"category": ["T·ªët", "Trung b√¨nh", "K√©m", "X·∫•u", "R·∫•t x·∫•u", "Nguy hi·ªÉm"]}
    )
    
    # T√πy ch·ªânh giao di·ªán
    fig.update_layout(
        xaxis_title="Ng√†y",
        yaxis_title="AQI",
        legend_title="M·ª©c ƒë·ªô",
        margin=dict(l=10, r=10, t=10, b=10),
        height=400,
        plot_bgcolor="white",
        hovermode="x unified"
    )
    
    # Th√™m v√πng bi·ªÉu th·ªã m·ª©c ƒë·ªô AQI
    fig.add_hrect(y0=0, y1=50, line_width=0, fillcolor="green", opacity=0.1)
    fig.add_hrect(y0=50, y1=100, line_width=0, fillcolor="yellow", opacity=0.1)
    fig.add_hrect(y0=100, y1=150, line_width=0, fillcolor="orange", opacity=0.1)
    fig.add_hrect(y0=150, y1=200, line_width=0, fillcolor="red", opacity=0.1)
    fig.add_hrect(y0=200, y1=300, line_width=0, fillcolor="purple", opacity=0.1)
    
    fig.update_traces(texttemplate='%{text:.0f}', textposition='outside')
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Hi·ªÉn th·ªã th√¥ng tin th√†nh ph·∫ßn √¥ nhi·ªÖm
    st.markdown("<h3>Th√†nh ph·∫ßn √¥ nhi·ªÖm</h3>", unsafe_allow_html=True)
    
    # L·ªçc c√°c c·ªôt d·ª±a v√†o l·ª±a ch·ªçn ng∆∞·ªùi d√πng
    if display_mode == "Ch·ªâ PM2.5":
        pollutant_cols = ["PM2.5"]
    elif display_mode == "Ch·ªâ PM10":
        pollutant_cols = ["PM10"]
    elif display_mode == "T√πy ch·ªânh":
        pollutant_cols = pollutants_to_show
    else:
        pollutant_cols = ["PM2.5", "PM10", "O3", "NO2", "SO2", "CO"]
    
    # T·∫°o DataFrame ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
    pollutant_df = daily_data[["date"] + pollutant_cols]
    pollutant_df_long = pd.melt(pollutant_df, id_vars=["date"], value_vars=pollutant_cols, 
                              var_name="Ch·∫•t √¥ nhi·ªÖm", value_name="N·ªìng ƒë·ªô (¬µg/m¬≥)")
    
    fig = px.line(
        pollutant_df_long, 
        x="date", 
        y="N·ªìng ƒë·ªô (¬µg/m¬≥)", 
        color="Ch·∫•t √¥ nhi·ªÖm",
        markers=True,
        line_shape="spline"
    )
    
    # T√πy ch·ªânh giao di·ªán
    fig.update_layout(
        xaxis_title="Ng√†y",
        yaxis_title="N·ªìng ƒë·ªô (¬µg/m¬≥)",
        legend_title="Ch·∫•t √¥ nhi·ªÖm",
        margin=dict(l=10, r=10, t=10, b=10),
        height=400,
        plot_bgcolor="white",
        hovermode="x unified"
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Hi·ªÉn th·ªã ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng
    st.markdown("<h3>ƒêi·ªÅu ki·ªán m√¥i tr∆∞·ªùng</h3>", unsafe_allow_html=True)
    
    env_cols = st.columns(4)
    
    with env_cols[0]:
        st.metric(
            label="Nhi·ªát ƒë·ªô", 
            value=f"{daily_data.iloc[-1]['temperature']}¬∞C",
            delta=f"{daily_data.iloc[-1]['temperature'] - daily_data.iloc[-2]['temperature']}¬∞C"
        )
    
    with env_cols[1]:
        st.metric(
            label="ƒê·ªô ·∫©m", 
            value=f"{daily_data.iloc[-1]['humidity']}%",
            delta=f"{daily_data.iloc[-1]['humidity'] - daily_data.iloc[-2]['humidity']}%"
        )
    
    with env_cols[2]:
        st.metric(
            label="T·ªëc ƒë·ªô gi√≥", 
            value=f"{daily_data.iloc[-1]['wind_speed']} km/h",
            delta=f"{daily_data.iloc[-1]['wind_speed'] - daily_data.iloc[-2]['wind_speed']} km/h"
        )
    
    with env_cols[3]:
        st.metric(
            label="L∆∞·ª£ng m∆∞a", 
            value=f"{daily_data.iloc[-1]['precipitation']} mm",
            delta=f"{daily_data.iloc[-1]['precipitation'] - daily_data.iloc[-2]['precipitation']} mm"
        )

with tab2:
    st.markdown("<h2>Ph√¢n t√≠ch chi ti·∫øt</h2>", unsafe_allow_html=True)
    
    # T∆∞∆°ng quan gi·ªØa c√°c th√†nh ph·∫ßn √¥ nhi·ªÖm
    st.markdown("<h3>T∆∞∆°ng quan gi·ªØa c√°c th√†nh ph·∫ßn √¥ nhi·ªÖm</h3>", unsafe_allow_html=True)
    
    correlation = daily_data[["aqi", "PM2.5", "PM10", "O3", "NO2", "SO2", "CO"]].corr()
    
    fig = px.imshow(
        correlation,
        text_auto=True,
        color_continuous_scale='RdBu_r',
        zmin=-1, zmax=1
    )
    
    fig.update_layout(
        height=500,
        margin=dict(l=10, r=10, t=10, b=10)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # T∆∞∆°ng quan v·ªõi ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng
    st.markdown("<h3>·∫¢nh h∆∞·ªüng c·ªßa ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng ƒë·∫øn AQI</h3>", unsafe_allow_html=True)
    
    env_factor = st.selectbox(
        "Ch·ªçn y·∫øu t·ªë m√¥i tr∆∞·ªùng:",
        ["temperature", "humidity", "wind_speed", "precipitation"],
        format_func=lambda x: {
            "temperature": "Nhi·ªát ƒë·ªô",
            "humidity": "ƒê·ªô ·∫©m",
            "wind_speed": "T·ªëc ƒë·ªô gi√≥",
            "precipitation": "L∆∞·ª£ng m∆∞a"
        }[x]
    )
    
    fig = px.scatter(
        daily_data,
        x=env_factor,
        y="aqi",
        trendline="ols",
        color_discrete_sequence=["#4361ee"],
        labels={
            "temperature": "Nhi·ªát ƒë·ªô (¬∞C)",
            "humidity": "ƒê·ªô ·∫©m (%)",
            "wind_speed": "T·ªëc ƒë·ªô gi√≥ (km/h)",
            "precipitation": "L∆∞·ª£ng m∆∞a (mm)",
            "aqi": "Ch·ªâ s·ªë AQI"
        }
    )
    
    fig.update_layout(
        height=400,
        margin=dict(l=10, r=10, t=10, b=10),
        plot_bgcolor="white"
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Ph√¢n t√≠ch theo th·ªùi gian
    st.markdown("<h3>Ph√¢n t√≠ch xu h∆∞·ªõng theo th·ªùi gian</h3>", unsafe_allow_html=True)
    
    st.markdown("""
    Ph√¢n t√≠ch xu h∆∞·ªõng ch·ªâ s·ªë AQI cho th·∫•y:
    
    - Ch·ªâ s·ªë AQI th∆∞·ªùng cao h∆°n v√†o gi·ªù cao ƒëi·ªÉm giao th√¥ng (6-9h s√°ng v√† 16-19h chi·ªÅu)
    - Cu·ªëi tu·∫ßn th∆∞·ªùng c√≥ ch·ªâ s·ªë AQI th·∫•p h∆°n ng√†y trong tu·∫ßn
    - Ch·ªâ s·ªë PM2.5 v√† PM10 c√≥ m·ªëi t∆∞∆°ng quan cao v·ªõi AQI t·ªïng th·ªÉ
    - T·ªëc ƒë·ªô gi√≥ cao th∆∞·ªùng ƒëi k√®m v·ªõi ch·ªâ s·ªë AQI th·∫•p h∆°n
    """)
    
    # T·∫°o n√∫t ƒë·ªÉ t·∫£i v·ªÅ d·ªØ li·ªáu ph√¢n t√≠ch
    st.download_button(
        label="T·∫£i v·ªÅ b√°o c√°o ph√¢n t√≠ch (.csv)",
        data=daily_data.to_csv(index=False).encode('utf-8'),
        file_name=f'aqi_analysis_{city}_{datetime.now().strftime("%Y%m%d")}.csv',
        mime='text/csv',
    )

with tab3:
    st.markdown("<h2>Tr·∫£i nghi·ªám ng∆∞·ªùi d√πng</h2>", unsafe_allow_html=True)
    
    # T·∫°o tab con trong tab tr·∫£i nghi·ªám
    whatif_tab, health_tab, sensor_tab = st.tabs(["üîÆ D·ª± ƒëo√°n What-If", "‚ù§Ô∏è Nh·∫≠t k√Ω s·ª©c kh·ªèe", "üì± C·∫£m bi·∫øn c√° nh√¢n"])
    
    with whatif_tab:
        st.markdown("<h3>D·ª± ƒëo√°n What-If</h3>", unsafe_allow_html=True)
        st.write("ƒêi·ªÅu ch·ªânh c√°c th√¥ng s·ªë ƒë·ªÉ xem t√°c ƒë·ªông ƒë·∫øn ch·ªâ s·ªë AQI")
        
        col1, col2 = st.columns(2)
        
        with col1:
            location = st.selectbox(
                "V·ªã tr√≠:",
                ["H√† N·ªôi", "H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "H·∫£i Ph√≤ng", "C·∫ßn Th∆°"],
                index=0
            )
            
            temperature = st.slider("Nhi·ªát ƒë·ªô (¬∞C):", 0, 40, 28)
            humidity = st.slider("ƒê·ªô ·∫©m (%):", 0, 100, 70)
            wind_speed = st.slider("T·ªëc ƒë·ªô gi√≥ (km/h):", 0, 30, 10)
        
        with col2:
            traffic_level = st.slider("M·ª©c ƒë·ªô giao th√¥ng (%):", 0, 100, 60)
            industrial_activity = st.slider("Ho·∫°t ƒë·ªông c√¥ng nghi·ªáp (%):", 0, 100, 40)
            season = st.selectbox(
                "M√πa:",
                ["Xu√¢n", "H√®", "Thu", "ƒê√¥ng"],
                index=1
            )
        
        # H√†m t√≠nh to√°n AQI d·ª±a tr√™n c√°c th√¥ng s·ªë
        def calculate_aqi_whatif(params):
            base_aqi = 50
            
            # TƒÉng AQI khi gi√≥ th·∫•p
            base_aqi += max(0, (15 - params["wind_speed"]) * 1.5)
            
            # TƒÉng AQI khi nhi·ªát ƒë·ªô cao
            base_aqi += max(0, (params["temperature"] - 25) * 2)
            
            # TƒÉng AQI theo m·ª©c ƒë·ªô giao th√¥ng
            base_aqi += params["traffic_level"] * 0.4
            
            # TƒÉng AQI theo ho·∫°t ƒë·ªông c√¥ng nghi·ªáp
            base_aqi += params["industrial_activity"] * 0.5
            
            # ƒêi·ªÅu ch·ªânh theo ƒë·ªô ·∫©m (ƒë·ªô ·∫©m trung b√¨nh l√†m gi·∫£m AQI)
            if params["humidity"] < 40 or params["humidity"] > 80:
                base_aqi += 10
            else:
                base_aqi -= 5
            
            # ƒêi·ªÅu ch·ªânh theo m√πa
            if params["season"] == "ƒê√¥ng":
                base_aqi += 15
            elif params["season"] == "Thu":
                base_aqi += 5
            elif params["season"] == "H√®":
                base_aqi -= 5
            
            # Gi·ªõi h·∫°n k·∫øt qu·∫£
            return min(300, max(20, round(base_aqi)))
        
        # T√≠nh to√°n AQI d·ª±a tr√™n c√°c th√¥ng s·ªë ƒë√£ ch·ªçn
        params = {
            "temperature": temperature,
            "humidity": humidity,
            "wind_speed": wind_speed,
            "traffic_level": traffic_level,
            "industrial_activity": industrial_activity,
            "season": season
        }
        
        predicted_aqi = calculate_aqi_whatif(params)
        aqi_info = get_aqi_info(predicted_aqi)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.markdown("### K·∫øt qu·∫£ d·ª± ƒëo√°n")
        
        st.markdown(f"""
        <div style="background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px;">
                <div>
                    <div style="font-size: 18px; font-weight: bold;">{location} - K·ªãch b·∫£n c·ªßa b·∫°n</div>
                    <div style="font-size: 14px; color: #555;">D·ª± ƒëo√°n d·ª±a tr√™n th√¥ng s·ªë ƒë√£ nh·∫≠p</div>
                </div>
                <div style="background-color: {aqi_info['color']}; color: white; width: 60px; height: 60px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 24px; font-weight: bold;">
                    {predicted_aqi}
                </div>
            </div>
            <hr style="margin: 10px 0;">
            <div style="font-size: 16px; font-weight: bold; color: {aqi_info['color']}; margin-bottom: 10px;">{aqi_info['category']}</div>
            <div style="font-size: 14px; margin-bottom: 10px;">{aqi_info['description']}</div>
            <div style="font-size: 14px;"><strong>Khuy·∫øn ngh·ªã:</strong> {aqi_info['recommendation']}</div>
        </div>
        """, unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã so s√°nh
        st.markdown("### So s√°nh v·ªõi k·ªãch b·∫£n c∆° s·ªü")
        
        # T·∫°o bi·ªÉu ƒë·ªì so s√°nh
        comparison_data = pd.DataFrame({
            'K·ªãch b·∫£n': ['Hi·ªán t·∫°i', 'D·ª± ƒëo√°n c·ªßa b·∫°n'],
            'AQI': [daily_data.iloc[-1]["aqi"], predicted_aqi]
        })
        
        fig = px.bar(
            comparison_data,
            x='K·ªãch b·∫£n',
            y='AQI',
            color='AQI',
            color_continuous_scale=[(0, "#00e400"), (0.2, "#ffff00"), (0.4, "#ff7e00"), 
                                    (0.6, "#ff0000"), (0.8, "#99004c"), (1, "#7d0023")],
            text='AQI'
        )
        
        fig.update_layout(
            height=300,
            margin=dict(l=10, r=10, t=10, b=10),
            plot_bgcolor="white"
        )
        
        fig.update_traces(texttemplate='%{text:.0f}', textposition='outside')
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Th√™m gi·∫£i th√≠ch
        st.markdown("### Ph√¢n t√≠ch t√°c ƒë·ªông")
        
        impact_factors = []
        
        if params["wind_speed"] < 8:
            impact_factors.append("T·ªëc ƒë·ªô gi√≥ th·∫•p l√†m tƒÉng n·ªìng ƒë·ªô √¥ nhi·ªÖm")
        
        if params["temperature"] > 30:
            impact_factors.append("Nhi·ªát ƒë·ªô cao th√∫c ƒë·∫©y ph·∫£n ·ª©ng quang h√≥a, t·∫°o O3")
        
        if params["traffic_level"] > 70:
            impact_factors.append("M·ª©c ƒë·ªô giao th√¥ng cao l√†m tƒÉng PM2.5 v√† NOx")
        
        if params["industrial_activity"] > 70:
            impact_factors.append("Ho·∫°t ƒë·ªông c√¥ng nghi·ªáp cao l√†m tƒÉng SO2 v√† b·ª•i")
        
        if params["humidity"] > 80:
            impact_factors.append("ƒê·ªô ·∫©m cao c√≥ th·ªÉ l√†m tƒÉng n·ªìng ƒë·ªô b·ª•i m·ªãn")
        
        if params["season"] == "ƒê√¥ng":
            impact_factors.append("M√πa ƒë√¥ng th∆∞·ªùng c√≥ hi·ªán t∆∞·ª£ng ngh·ªãch nhi·ªát, gi·ªØ √¥ nhi·ªÖm g·∫ßn m·∫∑t ƒë·∫•t")
        
        if not impact_factors:
            impact_factors.append("C√°c th√¥ng s·ªë ƒë·ªÅu ·ªü m·ª©c trung b√¨nh, kh√¥ng c√≥ y·∫øu t·ªë n·ªïi b·∫≠t")
        
        for factor in impact_factors:
            st.markdown(f"- {factor}")
        
        # T·∫£i xu·ªëng k·ªãch b·∫£n
        scenario_data = pd.DataFrame({
            'Th√¥ng s·ªë': ['V·ªã tr√≠', 'Nhi·ªát ƒë·ªô (¬∞C)', 'ƒê·ªô ·∫©m (%)', 'T·ªëc ƒë·ªô gi√≥ (km/h)', 
                        'M·ª©c ƒë·ªô giao th√¥ng (%)', 'Ho·∫°t ƒë·ªông c√¥ng nghi·ªáp (%)', 'M√πa', 'AQI d·ª± ƒëo√°n', 'M·ª©c ƒë·ªô'],
            'Gi√° tr·ªã': [location, temperature, humidity, wind_speed, 
                       traffic_level, industrial_activity, season, predicted_aqi, aqi_info['category']]
        })
        
        st.download_button(
            label="T·∫£i xu·ªëng k·ªãch b·∫£n",
            data=scenario_data.to_csv(index=False).encode('utf-8'),
            file_name=f'aqi_scenario_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
            mime='text/csv',
        )
        
    with health_tab:
        st.markdown("<h3>Nh·∫≠t k√Ω s·ª©c kh·ªèe</h3>", unsafe_allow_html=True)
        st.write("Ghi l·∫°i c√°c tri·ªáu ch·ª©ng ƒë·ªÉ theo d√µi m·ªëi t∆∞∆°ng quan v·ªõi ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠")
        
        # Ng√†y ghi nh·∫≠t k√Ω
        log_date = st.date_input("Ng√†y:", datetime.now())
        
        # Hi·ªÉn th·ªã AQI v√†o ng√†y ƒë√≥ (gi·∫£ l·∫≠p)
        simulated_aqi = int(daily_data.iloc[-1]["aqi"] + random.randint(-15, 15))
        aqi_info = get_aqi_info(simulated_aqi)
        
        st.markdown(f"""
        <div style="background-color: white; padding: 15px; border-radius: 10px; margin-bottom: 20px;">
            <div style="display: flex; align-items: center;">
                <div style="background-color: {aqi_info['color']}; color: white; width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: bold; margin-right: 15px;">
                    {simulated_aqi}
                </div>
                <div>
                    <div style="font-weight: bold;">AQI h√¥m nay: {aqi_info['category']}</div>
                    <div style="font-size: 14px; color: #555;">D·ªØ li·ªáu t·ª´ tr·∫°m g·∫ßn nh·∫•t</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Tri·ªáu ch·ª©ng
        st.markdown("#### Tri·ªáu ch·ª©ng")
        
        col1, col2 = st.columns(2)
        
        with col1:
            cough = st.checkbox("Ho")
            eye_irritation = st.checkbox("K√≠ch ·ª©ng m·∫Øt/m≈©i")
            breathing_difficulty = st.checkbox("Kh√≥ th·ªü")
        
        with col2:
            headache = st.checkbox("ƒêau ƒë·∫ßu")
            fatigue = st.checkbox("M·ªát m·ªèi")
            other_symptoms = st.checkbox("Tri·ªáu ch·ª©ng kh√°c")
        
        # Th√™m m√¥ t·∫£ n·∫øu c√≥ tri·ªáu ch·ª©ng kh√°c
        if other_symptoms:
            other_symptoms_desc = st.text_area("M√¥ t·∫£ tri·ªáu ch·ª©ng kh√°c:")
        
        # Ghi ch√∫
        st.markdown("#### Ghi ch√∫ th√™m")
        notes = st.text_area("Th√™m ghi ch√∫ v·ªÅ s·ª©c kh·ªèe v√† ho·∫°t ƒë·ªông trong ng√†y:")
        
        # Th·ªùi gian ·ªü ngo√†i tr·ªùi
        st.markdown("#### Th·ªùi gian ho·∫°t ƒë·ªông")
        outdoor_time = st.slider("Th·ªùi gian ·ªü ngo√†i tr·ªùi (gi·ªù):", 0, 24, 2)
        
        # C√°c bi·ªán ph√°p b·∫£o v·ªá
        st.markdown("#### Bi·ªán ph√°p b·∫£o v·ªá ƒë√£ s·ª≠ d·ª•ng")
        
        col1, col2 = st.columns(2)
        
        with col1:
            mask = st.checkbox("ƒêeo kh·∫©u trang")
            air_purifier = st.checkbox("S·ª≠ d·ª•ng m√°y l·ªçc kh√¥ng kh√≠")
        
        with col2:
            reduced_outdoor = st.checkbox("H·∫°n ch·∫ø ho·∫°t ƒë·ªông ngo√†i tr·ªùi")
            medications = st.checkbox("S·ª≠ d·ª•ng thu·ªëc")
        
        # N√∫t l∆∞u nh·∫≠t k√Ω
        if st.button("L∆∞u nh·∫≠t k√Ω s·ª©c kh·ªèe"):
            st.success("ƒê√£ l∆∞u th√†nh c√¥ng nh·∫≠t k√Ω s·ª©c kh·ªèe ng√†y " + log_date.strftime("%d/%m/%Y"))
            
            # ƒê√¢y ch·ªâ l√† demo, trong ·ª©ng d·ª•ng th·ª±c t·∫ø s·∫Ω l∆∞u d·ªØ li·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu
        
        # Hi·ªÉn th·ªã ph√¢n t√≠ch xu h∆∞·ªõng (gi·∫£ l·∫≠p)
        st.markdown("### Ph√¢n t√≠ch xu h∆∞·ªõng s·ª©c kh·ªèe")
        
        # T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p cho bi·ªÉu ƒë·ªì xu h∆∞·ªõng
        days = 30
        dates = [(datetime.now() - timedelta(days=i)).strftime("%d/%m") for i in range(days, 0, -1)]
        
        # T·∫°o d·ªØ li·ªáu AQI
        aqi_trend = [50 + random.randint(-20, 60) for _ in range(days)]
        
        # T·∫°o d·ªØ li·ªáu tri·ªáu ch·ª©ng (gi·∫£ l·∫≠p t∆∞∆°ng quan v·ªõi AQI)
        symptom_trend = []
        for aqi in aqi_trend:
            if aqi < 50:
                symptom_trend.append(random.randint(0, 1))
            elif aqi < 100:
                symptom_trend.append(random.randint(0, 2))
            elif aqi < 150:
                symptom_trend.append(random.randint(1, 3))
            else:
                symptom_trend.append(random.randint(2, 5))
        
        # T·∫°o DataFrame
        trend_data = pd.DataFrame({
            "Ng√†y": dates,
            "AQI": aqi_trend,
            "S·ªë tri·ªáu ch·ª©ng": symptom_trend
        })
        
        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = go.Figure()
        
        # Th√™m ƒë∆∞·ªùng AQI
        fig.add_trace(go.Scatter(
            x=trend_data["Ng√†y"],
            y=trend_data["AQI"],
            name="AQI",
            line=dict(color="#4361ee", width=2),
            yaxis="y"
        ))
        
        # Th√™m c·ªôt s·ªë tri·ªáu ch·ª©ng
        fig.add_trace(go.Bar(
            x=trend_data["Ng√†y"],
            y=trend_data["S·ªë tri·ªáu ch·ª©ng"],
            name="S·ªë tri·ªáu ch·ª©ng",
            marker_color="#ff6b6b",
            yaxis="y2"
        ))
        
        # C·∫•u h√¨nh layout v·ªõi hai tr·ª•c y
        fig.update_layout(
            title="M·ªëi t∆∞∆°ng quan gi·ªØa AQI v√† tri·ªáu ch·ª©ng s·ª©c kh·ªèe",
            xaxis=dict(title="Ng√†y"),
            yaxis=dict(
                title="AQI",
                title_font=dict(color="#4361ee"),
                tickfont=dict(color="#4361ee")
            ),
            yaxis2=dict(
                title="S·ªë tri·ªáu ch·ª©ng",
                title_font=dict(color="#ff6b6b"),
                tickfont=dict(color="#ff6b6b"),
                anchor="x",
                overlaying="y",
                side="right"
            ),
            legend=dict(x=0.01, y=0.99),
            margin=dict(l=10, r=10, t=50, b=10),
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Ph√¢n t√≠ch t∆∞∆°ng quan
        correlation = np.corrcoef(trend_data["AQI"], trend_data["S·ªë tri·ªáu ch·ª©ng"])[0, 1]
        
        st.markdown(f"""
        #### Ph√¢n t√≠ch c√° nh√¢n h√≥a
        
        H·ªá s·ªë t∆∞∆°ng quan gi·ªØa AQI v√† tri·ªáu ch·ª©ng c·ªßa b·∫°n: **{correlation:.2f}**
        
        D·ª±a tr√™n d·ªØ li·ªáu nh·∫≠t k√Ω c·ªßa b·∫°n:
        
        - B·∫°n th∆∞·ªùng g·∫∑p tri·ªáu ch·ª©ng v·ªÅ ƒë∆∞·ªùng h√¥ h·∫•p khi AQI v∆∞·ª£t qu√° 100
        - Vi·ªác ƒëeo kh·∫©u trang khi ra ngo√†i ƒë√£ gi√∫p gi·∫£m 60% tri·ªáu ch·ª©ng
        - Th·ªùi gian ·ªü ngo√†i tr·ªùi tr√™n 3 gi·ªù v√†o nh·ªØng ng√†y c√≥ AQI cao l√†m tƒÉng nguy c∆° c√≥ tri·ªáu ch·ª©ng
        
        **Khuy·∫øn ngh·ªã c√° nh√¢n:**
        - ƒêeo kh·∫©u trang N95 khi AQI v∆∞·ª£t qu√° 80
        - S·ª≠ d·ª•ng m√°y l·ªçc kh√¥ng kh√≠ trong nh√†
        - N√™n theo d√µi ch·ªâ s·ªë AQI tr∆∞·ªõc khi ra ngo√†i
        """)
    
    with sensor_tab:
        st.markdown("<h3>C·∫£m bi·∫øn c√° nh√¢n</h3>", unsafe_allow_html=True)
        st.write("K·∫øt n·ªëi c·∫£m bi·∫øn c√° nh√¢n ho·∫∑c nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c d·ª± b√°o")
        
        # Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p d·ªØ li·ªáu
        input_method = st.radio(
            "Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p d·ªØ li·ªáu:",
            ["Nh·∫≠p th·ªß c√¥ng", "T·∫£i l√™n t·ª´ file", "K·∫øt n·ªëi v·ªõi c·∫£m bi·∫øn IoT"]
        )
        
        if input_method == "Nh·∫≠p th·ªß c√¥ng":
            st.markdown("#### Nh·∫≠p d·ªØ li·ªáu ƒëo ƒë∆∞·ª£c t·ª´ c·∫£m bi·∫øn c·ªßa b·∫°n")
            
            col1, col2 = st.columns(2)
            
            with col1:
                pm25 = st.number_input("PM2.5 (¬µg/m¬≥):", min_value=0.0, max_value=1000.0, value=25.0, step=0.1)
                pm10 = st.number_input("PM10 (¬µg/m¬≥):", min_value=0.0, max_value=1000.0, value=45.0, step=0.1)
                o3 = st.number_input("O3 (ppb):", min_value=0.0, max_value=500.0, value=30.0, step=0.1)
            
            with col2:
                no2 = st.number_input("NO2 (ppb):", min_value=0.0, max_value=500.0, value=15.0, step=0.1)
                so2 = st.number_input("SO2 (ppb):", min_value=0.0, max_value=500.0, value=5.0, step=0.1)
                co = st.number_input("CO (ppm):", min_value=0.0, max_value=50.0, value=0.8, step=0.1)
            
            location_details = st.text_input("V·ªã tr√≠ chi ti·∫øt:", "Qu·∫≠n ƒê·ªëng ƒêa, H√† N·ªôi")
            measurement_time = st.time_input("Th·ªùi ƒëi·ªÉm ƒëo:", datetime.now().time())
            
            if st.button("G·ª≠i d·ªØ li·ªáu"):
                st.success("ƒê√£ g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng!")
                
                # T√≠nh AQI t·ª´ d·ªØ li·ªáu c·∫£m bi·∫øn (ƒë∆°n gi·∫£n h√≥a)
                sensor_aqi = int(pm25 * 3) # Gi·∫£ l·∫≠p t√≠nh to√°n
                aqi_info = get_aqi_info(sensor_aqi)
                
                st.markdown(f"""
                <div style="background-color: white; padding: 20px; border-radius: 10px; margin-top: 20px;">
                    <h4>AQI ƒë∆∞·ª£c t√≠nh t·ª´ c·∫£m bi·∫øn c·ªßa b·∫°n</h4>
                    <div style="display: flex; align-items: center;">
                        <div style="background-color: {aqi_info['color']}; color: white; width: 60px; height: 60px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 24px; font-weight: bold; margin-right: 20px;">
                            {sensor_aqi}
                        </div>
                        <div>
                            <div style="font-weight: bold; font-size: 18px;">{aqi_info['category']}</div>
                            <div style="font-size: 14px;">{location_details} - {measurement_time.strftime('%H:%M')}</div>
                        </div>
                    </div>
                    <p style="margin-top: 15px;">{aqi_info['description']}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # So s√°nh v·ªõi tr·∫°m quan tr·∫Øc g·∫ßn nh·∫•t
                station_aqi = daily_data.iloc[-1]["aqi"]
                difference = sensor_aqi - station_aqi
                
                st.markdown(f"""
                #### So s√°nh v·ªõi tr·∫°m quan tr·∫Øc g·∫ßn nh·∫•t
                
                - AQI t·ª´ c·∫£m bi·∫øn c·ªßa b·∫°n: **{sensor_aqi}** ({aqi_info['category']})
                - AQI t·ª´ tr·∫°m quan tr·∫Øc g·∫ßn nh·∫•t: **{station_aqi}** ({get_aqi_info(station_aqi)['category']})
                - Ch√™nh l·ªách: **{difference}** ƒëi·ªÉm
                
                {'Ch·ªâ s·ªë AQI t·ª´ c·∫£m bi·∫øn c·ªßa b·∫°n cao h∆°n ƒë√°ng k·ªÉ so v·ªõi tr·∫°m quan tr·∫Øc ch√≠nh th·ª©c. ƒêi·ªÅu n√†y c√≥ th·ªÉ do v·ªã tr√≠ c·ªßa b·∫°n g·∫ßn ngu·ªìn √¥ nhi·ªÖm c·ª•c b·ªô.' if difference > 10 else 'Ch·ªâ s·ªë AQI t·ª´ c·∫£m bi·∫øn c·ªßa b·∫°n t∆∞∆°ng ƒë·ªëi ph√π h·ª£p v·ªõi d·ªØ li·ªáu t·ª´ tr·∫°m quan tr·∫Øc ch√≠nh th·ª©c.'}
                """)
        
        elif input_method == "T·∫£i l√™n t·ª´ file":
            st.markdown("#### T·∫£i l√™n d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn")
            
            uploaded_file = st.file_uploader("Ch·ªçn file CSV ho·∫∑c Excel", type=["csv", "xlsx"])
            
            if uploaded_file is not None:
                st.success("ƒê√£ t·∫£i l√™n file th√†nh c√¥ng!")
                st.markdown("""
                #### H∆∞·ªõng d·∫´n ƒë·ªãnh d·∫°ng file
                
                File CSV n√™n c√≥ c√°c c·ªôt sau:
                - timestamp: Th·ªùi gian ƒëo (ƒë·ªãnh d·∫°ng YYYY-MM-DD HH:MM:SS)
                - pm25: N·ªìng ƒë·ªô PM2.5 (¬µg/m¬≥)
                - pm10: N·ªìng ƒë·ªô PM10 (¬µg/m¬≥)
                - o3: N·ªìng ƒë·ªô O3 (ppb) - t√πy ch·ªçn
                - no2: N·ªìng ƒë·ªô NO2 (ppb) - t√πy ch·ªçn
                - so2: N·ªìng ƒë·ªô SO2 (ppb) - t√πy ch·ªçn
                - co: N·ªìng ƒë·ªô CO (ppm) - t√πy ch·ªçn
                - location: V·ªã tr√≠ ƒëo - t√πy ch·ªçn
                """)
                
                # Tr∆∞·ªùng h·ª£p th·ª±c t·∫ø s·∫Ω ƒë·ªçc file v√† x·ª≠ l√Ω d·ªØ li·ªáu
                # Demo: hi·ªÉn th·ªã b·∫£n xem tr∆∞·ªõc
                st.markdown("#### B·∫£n xem tr∆∞·ªõc d·ªØ li·ªáu")
                
                # T·∫°o d·ªØ li·ªáu m·∫´u
                preview_data = pd.DataFrame({
                    "timestamp": [(datetime.now() - timedelta(hours=i)).strftime("%Y-%m-%d %H:%M:%S") for i in range(5)],
                    "pm25": [24.5, 26.3, 25.7, 23.8, 22.9],
                    "pm10": [45.2, 48.7, 46.5, 44.1, 42.8],
                    "o3": [30.5, 32.1, 31.8, 29.7, 28.9],
                    "location": ["Qu·∫≠n ƒê·ªëng ƒêa, H√† N·ªôi"] * 5
                })
                
                st.dataframe(preview_data)
                
                if st.button("X·ª≠ l√Ω d·ªØ li·ªáu"):
                    st.success("ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu th√†nh c√¥ng!")
                    
                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì d·ªØ li·ªáu
                    st.markdown("#### Ph√¢n t√≠ch d·ªØ li·ªáu c·∫£m bi·∫øn")
                    
                    fig = px.line(
                        preview_data,
                        x="timestamp",
                        y=["pm25", "pm10"],
                        labels={"value": "N·ªìng ƒë·ªô (¬µg/m¬≥)", "timestamp": "Th·ªùi gian", "variable": "Ch·∫•t √¥ nhi·ªÖm"},
                        markers=True
                    )
                    
                    fig.update_layout(
                        height=400,
                        margin=dict(l=10, r=10, t=10, b=10),
                        legend_title="Ch·∫•t √¥ nhi·ªÖm"
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # T√≠ch h·ª£p d·ªØ li·ªáu
                    st.markdown("""
                    #### D·ªØ li·ªáu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p!
                    
                    D·ª± b√°o AQI c√° nh√¢n h√≥a s·∫Ω t√≠nh ƒë·∫øn d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn c·ªßa b·∫°n, gi√∫p tƒÉng ƒë·ªô ch√≠nh x√°c cho khu v·ª±c c·ª• th·ªÉ c·ªßa b·∫°n.
                    
                    C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p d·ªØ li·ªáu ƒë·ªÉ c·∫£i thi·ªán h·ªá th·ªëng d·ª± b√°o c·ªßa ch√∫ng t√¥i.
                    """)
        
        else:  # K·∫øt n·ªëi v·ªõi c·∫£m bi·∫øn IoT
            st.markdown("#### K·∫øt n·ªëi v·ªõi c·∫£m bi·∫øn IoT")
            
            # Hi·ªÉn th·ªã c√°c t√πy ch·ªçn k·∫øt n·ªëi
            sensor_type = st.selectbox(
                "Lo·∫°i c·∫£m bi·∫øn:",
                ["PurpleAir", "AirVisual", "Sensirion", "Atmotube", "Kh√°c"]
            )
            
            connection_method = st.radio(
                "Ph∆∞∆°ng th·ª©c k·∫øt n·ªëi:",
                ["API", "MQTT", "Bluetooth", "Wi-Fi tr·ª±c ti·∫øp"]
            )
            
            if connection_method == "API":
                api_key = st.text_input("API Key:", type="password")
                sensor_id = st.text_input("Sensor ID:")
            elif connection_method == "MQTT":
                mqtt_broker = st.text_input("MQTT Broker:")
                mqtt_topic = st.text_input("MQTT Topic:")
                mqtt_username = st.text_input("Username:")
                mqtt_password = st.text_input("Password:", type="password")
            elif connection_method == "Bluetooth":
                st.markdown("Qu√©t c√°c thi·∫øt b·ªã Bluetooth g·∫ßn ƒë√¢y:")
                
                # Gi·∫£ l·∫≠p danh s√°ch thi·∫øt b·ªã
                devices = [
                    {"name": "AirSensor-1A2B", "id": "00:11:22:33:44:55", "rssi": -67},
                    {"name": "PM25-Monitor", "id": "AA:BB:CC:DD:EE:FF", "rssi": -72},
                    {"name": "AQI-NodeMCU", "id": "A1:B2:C3:D4:E5:F6", "rssi": -85}
                ]
                
                for device in devices:
                    st.markdown(f"""
                    <div style="background-color: white; padding: 10px; border-radius: 10px; margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: bold;">{device['name']}</div>
                            <div style="font-size: 12px; color: #555;">{device['id']} | T√≠n hi·ªáu: {device['rssi']} dBm</div>
                        </div>
                        <button style="background-color: #4361ee; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer;">K·∫øt n·ªëi</button>
                    </div>
                    """, unsafe_allow_html=True)
            else:  # Wi-Fi
                st.markdown("C·∫•u h√¨nh k·∫øt n·ªëi Wi-Fi tr·ª±c ti·∫øp:")
                sensor_ip = st.text_input("ƒê·ªãa ch·ªâ IP c·∫£m bi·∫øn:")
                sensor_port = st.text_input("C·ªïng:", "80")
                auth_required = st.checkbox("Y√™u c·∫ßu x√°c th·ª±c")
                
                if auth_required:
                    sensor_username = st.text_input("Username:")
                    sensor_password = st.text_input("Password:", type="password")
            
            if st.button("K·∫øt n·ªëi"):
                st.success("ƒêang k·∫øt n·ªëi v·ªõi c·∫£m bi·∫øn... Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t")
                
                # Gi·∫£ l·∫≠p k·∫øt n·ªëi th√†nh c√¥ng
                st.markdown("""
                ‚úÖ **K·∫øt n·ªëi th√†nh c√¥ng!**
                
                C·∫£m bi·∫øn ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng v√† b·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªói 5 ph√∫t.
                """)
                
                # Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u t·ª´ c·∫£m bi·∫øn
                st.markdown("#### D·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(label="PM2.5", value="24.3 ¬µg/m¬≥", delta="1.2 ¬µg/m¬≥")
                
                with col2:
                    st.metric(label="PM10", value="42.7 ¬µg/m¬≥", delta="-0.8 ¬µg/m¬≥")
                
                with col3:
                    st.metric(label="AQI t√≠nh to√°n", value="73", delta="2")
                
                # Hi·ªÉn th·ªã tr·∫°ng th√°i c·∫£m bi·∫øn
                st.markdown("""
                #### Tr·∫°ng th√°i c·∫£m bi·∫øn
                
                - **T√™n c·∫£m bi·∫øn:** {sensor_type}-{random.randint(1000, 9999)}
                - **Phi√™n b·∫£n firmware:** 1.2.5
                - **Pin:** 78%
                - **Th·ªùi gian ho·∫°t ƒë·ªông:** 3 ng√†y 7 gi·ªù
                - **C∆∞·ªùng ƒë·ªô t√≠n hi·ªáu:** T·ªët (-67 dBm)
                
                #### C√†i ƒë·∫∑t c·∫£m bi·∫øn
                """)
                
                update_interval = st.slider("T·∫ßn su·∫•t c·∫≠p nh·∫≠t d·ªØ li·ªáu (ph√∫t):", 1, 60, 5)
                
                sync_settings = st.checkbox("ƒê·ªìng b·ªô d·ªØ li·ªáu l√™n ƒë√°m m√¢y", value=True)
                local_storage = st.checkbox("L∆∞u tr·ªØ d·ªØ li·ªáu c·ª•c b·ªô khi m·∫•t k·∫øt n·ªëi", value=True)
                
                if st.button("L∆∞u c√†i ƒë·∫∑t"):
                    st.success("ƒê√£ l∆∞u c√†i ƒë·∫∑t c·∫£m bi·∫øn th√†nh c√¥ng!")

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    # ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ·ªü tr√™n
    pass